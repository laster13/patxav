#!/bin/bash

---
- hosts: localhost
  gather_facts: false
  vars_files:
    - /opt/seedbox/variables/account.yml
  tasks:
        
    # FACTS #######################################################################

    - name: create tautulli state
      shell: |
        echo "1" > /opt/seedbox/status/tautulli

    - name: Checking for existing app data
      stat:
        path: '/opt/seedbox/docker/{{user.name}}/authelia/configuration.yml'
      register: check

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'sub' variable"
      set_fact:
        sub_enabled: "{{ true if not(
            (sub.tautulli is undefined)
            or
            (sub.tautulli is none)
            or
            (sub.tautulli | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: '/opt/seedbox-compose/includes/config/roles/cloudflare/tasks/main.yml'
      vars:
        subdomain: "{{sub.tautulli if sub_enabled else 'tautulli'}}"
      when: cloudflare_enabled

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'tautulli'
        intport: '8181'
        image: 'linuxserver/tautulli'

    # CORE (MANDATORY) ############################################################      
    - name: Creating scripts and plugins paths
      file: 'path={{item}} state=directory mode=0775 owner={{user.userid}} group={{user.groupid}}'
      with_items:
        - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/scripts'
        - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/plugins'

    - name: 'Check if Templates Exist for {{pgrole}}'
      stat:
        path: './templates/{{pgrole}}'
      register: copycheck

    - name: 'Copying Scripts & Plugins'
      copy:
        src: ./templates/{{pgrole}}
        dest: /opt/seedbox/docker/{{user.name}}
        directory_mode: yes
        force: yes
        owner: '{{user.userid}}'
        group: '{{user.groupid}}'
        mode: 0775
      when: copycheck.stat.exists
      
    - name: 'Checking for existing app data'
      stat:
        path: /opt/seedbox/docker/{{user.name}}/tautulli/config.ini
      register: confcheck

    # LABELS ######################################################################
    - name: 'Ajout label traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          ## HTTP Routers
          traefik.http.routers.tautulli-rtr.entrypoints: 'https'
          traefik.http.routers.tautulli-rtr.rule: 'Host(`{{sub.tautulli if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.http.routers.tautulli-rtr.tls: 'true'
          ## Middlewares
          traefik.http.routers.tautulli-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
          ## HTTP Services
          traefik.http.routers.tautulli-rtr.service: 'tautulli-svc'
          traefik.http.services.tautulli-svc.loadbalancer.server.port: '8181'

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}:/config'
          - '/opt/seedbox/docker/{{user.name}}/plex/database/Library/Application Support/Plex Media Server/Logs:/logs'
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/scripts:/scripts'
          - '/etc/localtime:/etc/localtime:ro'

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: '{{user.userid}}'
          PGID: '{{user.groupid}}'
          TZ: 'Europe/Paris'


    # MAIN DEPLOYMENT #############################################################
    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        published_ports:
          - '127.0.0.1:8181:8181'
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
        state: started
        labels: '{{pg_labels}}'

    # AFTER ########################################################################
    - name: 'Configuring {{pgrole}} for first time use'
      block:
        - name: 'Waiting for {{pgrole}} to start'
          wait_for:
            path: '/opt/seedbox/docker/{{user.name}}/tautulli/config.ini'
            state: present

        - name: Stop Container
          docker_container:
            name: tautulli
            state: stopped

        # - name: set http_username
        #   ini_file:
        #     path: '/opt/seedbox/docker/%USER%/{{pgrole}}/config.ini'
        #     section: misc
        #     option: http_username
        #     value: plex
        #     state: present

        # - name: set http_password
        #   ini_file:
        #     path: '/opt/seedbox/docker/%USER%/{{pgrole}}/config.ini'
        #     section: misc
        #     option: http_password
        #     value: guide
        #     state: present

        - name: Restart {{pgrole}}
          docker_container:
            name: '{{pgrole}}'
            state: started

      when: not confcheck.stat.exists

    - name: add resume file
      shell: |
        echo "{{pgrole}}-{{sub.tautulli if sub_enabled else pgrole}}.{{user.domain}}" >> /opt/temp.txt

    - name: create tautulli state
      shell: |
        echo "2" > /opt/seedbox/status/tautulli


