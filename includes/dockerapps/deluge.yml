#!/bin/bash

---
- hosts: localhost
  gather_facts: false
  vars_files:
    - /opt/seedbox/variables/account.yml
  tasks:
        
    # FACTS #######################################################################

    - name: create deluge state
      shell: |
        echo "1" > /opt/seedbox/status/deluge

    - name: Checking for existing app data
      stat:
        path: '/opt/seedbox/docker/{{user.name}}/authelia/configuration.yml'
      register: check

    - name: "Variables | Set 'cloudflare_enabled' variable"
      set_fact:
        cloudflare_enabled: "{{ true if not(
            (cloudflare.login is undefined)
            or
            (cloudflare.login is none)
            or
            (cloudflare.login | trim | length == 0)
            or
            (cloudflare.api is undefined)
            or
            (cloudflare.api is none)
            or
            (cloudflare.api | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'oauth_enabled' variable"
      set_fact:
        oauth_enabled: "{{ true if not(
            (oauth.client is undefined)
            or
            (oauth.client is none)
            or
            (oauth.client | trim | length == 0)
            or
            (oauth.secret is undefined)
            or
            (oauth.secret is none)
            or
            (oauth.secret | trim | length == 0)
            or
            (oauth.account is undefined)
            or
            (oauth.account is none)
            or
            (oauth.account | trim | length == 0)
          )
            else false }}"

    - name: "Variables | Set 'sub' variable"
      set_fact:
        sub_enabled: "{{ true if not(
            (sub.deluge is undefined)
            or
            (sub.deluge is none)
            or
            (sub.deluge | trim | length == 0)
          )
            else false }}"

    - name: "Set DNS Record on CloudFlare"
      include_tasks: '/opt/seedbox-compose/includes/config/roles/cloudflare/tasks/main.yml'
      vars:
        subdomain: "{{sub.deluge if sub_enabled else 'deluge'}}"
      when: cloudflare_enabled

    - name: 'Set Known Facts'
      set_fact:
        pgrole: 'deluge'
        intport: '8112'
        image: 'linuxserver/deluge'

    - name: 'Creating rutorrent folder paths'
      file: 'path={{item}} state=directory mode=0775 owner={{user.userid}} group={{user.groupid}}'
      with_items:
        - '/home/{{user.name}}/local/{{pgrole}}'
        - '/home/{{user.name}}/local/{{pgrole}}/downloads'
        - '/home/{{user.name}}/local/{{pgrole}}/incomplete'
        - '/home/{{user.name}}/local/{{pgrole}}/torrent'
        - '/home/{{user.name}}/local/{{pgrole}}/watch'

    # LABELS ######################################################################
    - name: 'Adding Traefik'
      set_fact:
        pg_labels:
          traefik.enable: 'true'
          ## HTTP Routers
          traefik.http.routers.deluge-rtr.entrypoints: 'https'
          traefik.http.routers.deluge-rtr.rule: 'Host(`{{sub.deluge if sub_enabled else pgrole}}.{{user.domain}}`)'
          traefik.http.routers.deluge-rtr.tls: 'true'
          ## Middlewares
          traefik.http.routers.deluge-rtr.middlewares: "{{ 'chain-authelia@file' if check.stat.exists | default(false) else 'chain-oauth@file' if oauth_enabled | default(false) else 'chain-basic-auth@file' }}"
          ## HTTP Services
          #traefik.http.routers.deluge-rtr.tls.certresolver: 'dns-cloudflare' 
          traefik.http.routers.deluge-rtr.service: 'deluge-svc'
          traefik.http.services.deluge-svc.loadbalancer.server.port: '8112'

    - name: 'Setting PG Volumes'
      set_fact:
        pg_volumes:
          - '/etc/localtime:/etc/localtime:ro'
          - '/opt/seedbox/docker/{{user.name}}/{{pgrole}}:/config'
          - '/home/{{user.name}}:/home/{{user.name}}'

    - name: 'Setting PG ENV'
      set_fact:
        pg_env:
          PUID: '{{user.userid}}'
          PGID: '{{user.groupid}}'

    # MAIN DEPLOYMENT #############################################################
    - name: 'Deploying {{pgrole}}'
      docker_container:
        name: '{{pgrole}}'
        image: '{{image}}'
        pull: yes
        published_ports:
          - '127.0.0.1:8112:8112'
          - '127.0.0.1:58112:58112'
          - '127.0.0.1:58846:58846'
        volumes: '{{pg_volumes}}'
        env: '{{pg_env}}'
        restart_policy: unless-stopped
        networks:
          - name: traefik_proxy
        state: started
        labels: '{{pg_labels}}'

    # CONFIGURATION ###########################################################
    - name: 'Waiting for {{pgrole}} to initialize'
      wait_for:
        timeout: 10

    - name: Stopping {{pgrole}}
      docker_container:
        name: '{{pgrole}}'
        state: stopped

    - name: 'Checking for appdata'
      wait_for:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        state: present
        delay: 5

    - name: Set move completed location
      lineinfile:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        regexp: '"move_completed_path".*'
        line: '"move_completed_path": "/home/{{user.name}}/local/{{pgrole}}/downloads",'
        state: present

    - name: Set download location
      lineinfile:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        regexp: '"download_location".*'
        line: '"download_location": "/home/{{user.name}}/local/{{pgrole}}/incomplete",'
        state: present

    - name: Setting torrent file directory
      lineinfile:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        regexp: '"torrentfiles_location".*'
        line: '"torrentfiles_location": "/home/{{user.name}}/local/{{pgrole}}/torrent",'
        state: present

    - name: Setting torrent watch directory
      lineinfile:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        regexp: '"autoadd_location".*'
        line: '"autoadd_location": "/home/{{user.name}}/local/{{pgrole}}/watch",'
        state: present

    - name: Setting move_completed
      lineinfile:
        path: '/opt/seedbox/docker/{{user.name}}/{{pgrole}}/core.conf'
        regexp: '"move_completed".*'
        line: '"move_completed": true,'
        state: present

    - name: Restart {{pgrole}}
      docker_container:
        name: '{{pgrole}}'
        state: started

    - name: add resume file
      shell: |
        echo "{{pgrole}}-{{sub.deluge if sub_enabled else pgrole}}.{{user.domain}}" >> /opt/temp.txt

    - name: create deluge state
      shell: |
        echo "2" > /opt/seedbox/status/deluge


